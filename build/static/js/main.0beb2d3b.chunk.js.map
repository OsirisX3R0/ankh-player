{"version":3,"sources":["Layout/Header.js","hooks/useStorage.js","components/folders/SelectFolders.js","components/NowPlaying.js","components/albums/AlbumListItem.js","components/albums/AlbumList.js","components/Library.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["Header","useStorage","storageItem","JSON","parse","localStorage","getItem","newValue","setItem","stringify","SelectFolders","setSongs","className","htmlFor","type","id","onChange","e","target","files","length","filter","file","includes","map","webkitRelativePath","webkitdirectory","directory","multiple","NowPlaying","AlbumListItem","AlbumList","albums","album","i","key","listItems","Library","el","songs","Player","App","exact","from","to","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0beb2d3b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <h3>Ankh</h3>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","const useStorage = storageItem => {\r\n    //useEffect(() => , [storageItem])\r\n\r\n    var value = JSON.parse(localStorage.getItem(storageItem));\r\n    var setItem = newValue => localStorage.setItem(storageItem, JSON.stringify(newValue));\r\n    return [value, setItem];\r\n}\r\n\r\nexport default useStorage;","import React, { useState } from 'react';\r\nimport folderService from '../../services/folderService';\r\nimport useStorage from '../../hooks/useStorage';\r\n\r\nconst SelectFolders = () => {\r\n    const [songs, setSongs] = useStorage('songs')\r\n    \r\n    const displayFolders = (e) => {\r\n        if (e.target.files.length > 0) {\r\n            let files = [...e.target.files]\r\n                .filter(file => file.type.includes(\"audio\"))\r\n                .map(file => file.webkitRelativePath)\r\n\r\n            // files.forEach(file => {\r\n            //     // ffmetadata.read(file, (err,  data) => {\r\n            //     //     if (err) console.error(err);\r\n            //     //     file = data;\r\n            //     // })\r\n            // })\r\n\r\n            // folderService.scanLibrary(files)\r\n                \r\n            setSongs(files)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"folder-select\">\r\n            <h3>Select Folders</h3>\r\n            <label className=\"custom-input\" htmlFor=\"select-folders\">Select Files</label>\r\n            <input \r\n            type=\"file\" \r\n            className=\"file-input\" \r\n            id=\"select-folders\" \r\n            onChange={displayFolders}\r\n            webkitdirectory=\"true\" directory=\"true\" multiple />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectFolders;","import React from 'react';\r\n\r\nconst NowPlaying = () => {\r\n    return(\r\n        <div>Now Playing</div>\r\n    )\r\n}\r\n\r\nexport default NowPlaying;","import React, {Fragment} from 'react';\r\n\r\nconst AlbumListItem = () => {\r\n    return(\r\n        <Fragment></Fragment>\r\n    )\r\n}\r\n\r\nexport default AlbumListItem;","import React, { Fragment } from 'react';\r\nimport AlbumListItem from './AlbumListItem';\r\n\r\nconst AlbumList = ({ albums }) => {\r\n    const listItems = () => {\r\n        if (albums) {\r\n            return albums.map((album, i) => <AlbumListItem key={i} album={album} /> )\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            {listItems()}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AlbumList;","import React, { useEffect, useState, Fragment } from 'react';\r\nimport SelectFolders from './folders/SelectFolders';\r\nimport NowPlaying from './NowPlaying';\r\nimport AlbumList from './albums/AlbumList';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport useStorage from '../hooks/useStorage';\r\nimport folderService from '../services/folderService';\r\n\r\nconst Library = () => {\r\n    // const [foldersList, setFoldersList] = useState([]);\r\n    // const [folders, setFolders] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    //     folderService.getFolders(\"C://\")\r\n    //         .then(res => setFoldersList(res.data))\r\n    // }, [])\r\n\r\n    // function toggleFolder(e) {\r\n    //     var tmpFolders = folders;\r\n    //     if (e.target.checked) {\r\n    //         tmpFolders.push(e.target.value);\r\n    //     } else {\r\n    //         tmpFolders = tmpFolders.filter(folder => folder !== e.target.value)\r\n    //     }\r\n\r\n    //     setFolders(tmpFolders);\r\n    // }\r\n    const [songs, setSongs] = useStorage('songs')\r\n\r\n    const noFolders = (el) => {\r\n        if (!songs) {\r\n            return <SelectFolders />\r\n        } else {\r\n            return el\r\n        }\r\n    }\r\n return (\r\n     <Fragment>\r\n        {/* <h3>Select folders</h3>\r\n        <ul className=\"files\">\r\n            {foldersList.map((f, i) => {\r\n                return (\r\n                    <li key={i}>\r\n                        {f}\r\n                        <label className=\"check\">\r\n                            <input type=\"checkbox\" onChange={toggleFolder} value={f} />\r\n                            <span></span>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul> */}\r\n        <Tabs>\r\n            <TabPanel>\r\n                {noFolders(<AlbumList />)}\r\n            </TabPanel>\r\n            <TabPanel>Artists</TabPanel>\r\n            <TabPanel>Songs</TabPanel>\r\n            <TabPanel>Playlists</TabPanel>\r\n\r\n            <TabList>\r\n                <Tab>Albums</Tab>\r\n                <Tab>Artists</Tab>\r\n                <Tab>Songs</Tab>\r\n                <Tab>Playlists</Tab>\r\n            </TabList>\r\n        </Tabs>\r\n        <NowPlaying />\r\n     </Fragment>\r\n );\r\n}\r\n\r\nexport default Library;","import React, { Fragment } from 'react';\r\n\r\nconst Player = () => {\r\n    return(\r\n        <Fragment></Fragment>\r\n    )\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router';\r\nimport Header from './Layout/Header';\r\nimport './App.scss';\r\nimport Library from './components/Library';\r\nimport Player from './components/Player';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Redirect exact from='/' to='/library'></Redirect>\r\n      <Route exact path='/library' component={Library}></Route>\r\n      <Route exact path='/player' component={Player}></Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}